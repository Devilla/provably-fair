import * as assert from 'assert';
import * as crypto from 'crypto';
import { seedGenerator, createNums, keno } from '../../../src/services/provably-fair/keno';

describe('Crypto Functions', () => {
 it('seedGenerator should return a string', () => {
    const hash = 'testHash';
    const salt = 'testSalt';
    const result = seedGenerator(hash, salt);
    assert.strictEqual(typeof result, 'string');
 });

 it('createNums should return an array of NumHashPair', () => {
    const hash = 'testHash';
    const allNums = [1, 2, 3, 4, 5];
    const result = createNums(allNums, hash);
    assert.ok(Array.isArray(result));
    assert.strictEqual(result[0].num, 1);
    assert.strictEqual(typeof result[0].hash, 'string');
 });

 it('keno should return an array of numbers', () => {
    const hash = 'testHash';
    const result = keno(hash);
    assert.ok(Array.isArray(result));
    assert.strictEqual(result.length, 10);
    result.forEach(num => assert.strictEqual(typeof num, 'number'));
 });

 describe('keno', () => {
   it('should return an array of numbers when given a valid string', () => {
     const result = keno('test');
     assert.ok(Array.isArray(result));
   });
 
   it('should return an array of 10 numbers', () => {
     const result = keno('test');
     assert.strictEqual(result.length, 10);
   });
 
   it('should return numbers between 1 and 80', () => {
     const result = keno('test');
     result.forEach(num => {
       assert.ok(num >= 1);
       assert.ok(num <= 80);
     });
   });
 
   it('should return different numbers each time it is called', () => {
     const result1 = keno('test1');
     const result2 = keno('test2');
     assert.notDeepStrictEqual(result1, result2);
   });
 
   it('should use crypto library to generate random numbers', () => {
     // Check that the random numbers generated by keno are the same as the ones generated by crypto library
     const data = 'test';
     const hash = crypto.createHmac('sha256', data).digest('hex');
     const hexString = hash.substring(0, 40);
     const intBuffer1 = Buffer.from(hexString, 'hex');
     const intValue1 = intBuffer1.readUInt32BE(0);
     const intBuffer2 = Buffer.from(hexString.substring(4), 'hex');
     const intValue2 = intBuffer2.readUInt32BE(0);
     const intBuffer3 = Buffer.from(hexString.substring(8), 'hex');
     const intValue3 = intBuffer3.readUInt32BE(0);
     const intBuffer4 = Buffer.from(hexString.substring(12), 'hex');
     const intValue4 = intBuffer4.readUInt32BE(0);
     const result1 = keno(data);
     const result2 = [intValue1 / (2 ** 32), intValue2 / (2 ** 32), intValue3 / (2 ** 32), intValue4 / (2 ** 32),
       intValue1 / (2 ** 32), intValue2 / (2 ** 32), intValue3 / (2 ** 32), intValue4 / (2 ** 32),
       intValue1 / (2 ** 32), intValue2 / (2 ** 32)];
     assert.deepStrictEqual(result1, result2);
   });
});
});
