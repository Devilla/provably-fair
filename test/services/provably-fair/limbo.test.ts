const assert = require('assert');
import * as crypto from 'crypto';
import { limbo } from '../../../src/services/provably-fair/limbo';

describe('handle limbo', () => {
 it('should return a number when given a valid string', () => {
    const data = 'testData';
    const result = limbo(data);
    assert.strictEqual(typeof result, 'number');
 });

 it('should return a string when the hash is empty', () => {
    const data = '';
    const result = limbo(data);
    assert.strictEqual(typeof result, 'string');
 });

 it('should return a number greater than 1 when given a valid string', () => {
    const data = 'testData';
    const result = limbo(data);
    assert.ok(result > '1' && !isNaN(Number(result)));
 });

 it('should return a number less than or equal to 1 when the hash is empty', () => {
    const data = '';
    const result = limbo(data);
    assert.ok(result <= '1'&& !isNaN(Number(result)));
 });

  // Add more tests as needed to cover different scenarios and edge cases

 it('should use crypto library to generate random numbers', () => {
   // Check that the random number generated by limbo is the same as the one generated by crypto library
   const data = 'test';
   const hash = crypto.createHmac('sha256', data).digest('hex');
   const hexString = hash.substring(0, 16);
   const intBuffer = Buffer.from(hexString, 'hex');
   const intValue = intBuffer.readUInt32BE(0);
   const result1 = limbo(data);
   const result2 = intValue / (2 ** 32);
   assert.strictEqual(result1, result2);
 });
});